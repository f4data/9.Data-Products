Light.Sleep.hrs = light..s./3600,
Total.Sleep.hrs = Deep.Sleep.hrs + Light.Sleep.hrs,
Awake.hrs = awake..s./3600,
Wake.Up.times = wake.up)
sleep <- aggregate(. ~ date, FUN=sum, data=sleep)
data <- merge(data, sleep, by="date", all=TRUE)
###############################
# BLOOD
###############################
blood$posix <- as.POSIXlt(blood$Date, format="%Y-%m-%d %I:%M %p")
blood$date <- format(blood$posix, "%Y-%m-%d")
blood$time <- format(blood$posix, "%H:%M")
blood <- subset(blood, select=c(-Date, -Comments, -posix, -time))
blood <- aggregate(. ~ date, FUN=mean, data=blood)
blood <- rename(blood,
Heart.Rate.bpm = Heart.rate..bpm.)
blood$date <- as.factor(blood$date)
data <- merge(data, blood, by="date", all=TRUE)
###############################
# WEIGHT
###############################
weight$posix <- as.POSIXlt(weight$Date, format="%Y-%m-%d %I:%M %p")
weight$date <- format(weight$posix, "%Y-%m-%d")
weight$time <- format(weight$posix, "%H:%M")
weight <- subset(weight, select= c(-Date, -Comments, -posix, -time))
weight <- aggregate(. ~ date, FUN=mean, data=weight)
weight <- rename(weight,
Weight.Kg = Weight..kg.,
Fat.Mass.percent = Fat.mass....,
Lean.Mass.percent = Lean.mass....)
weight$date <- as.factor(weight$date)
data <- merge(data, weight, by="date", all=TRUE)
###############################
# HOLIDAYS
###############################
data[isWeekday(data$date), ]$Day.Type <- "WORKDAY"
data[isWeekend(data$date), ]$Day.Type <- "WEEKEND"
data[data$date %in% daysoff,]$Day.Type <- "HOLIDAY"
data$date <- as.Date(data$date)
runApp(display.mode="showcase")
runApp(display.mode="showcase")
Deep.Sleep.hrs
?
d
e
str(sleep)
ggplot(data = data, aes (date, Total.Sleep.hrs)) + geom_smooth(method="lm", aes(group=1)) + geom_point() + facet_grid(. ~ Day.Type)
ggplot(data = data, aes (date, Total.Sleep.hrs)) + geom_smooth(method="lm") + geom_point() + facet_grid(. ~ Day.Type)
summary(date$Total.Sleep.hrs)
summary(date)
summary(data)
summary(data$Total.Sleep.hrs)
head(data$Total.Sleep.hrs)
str(data$Total.Sleep.hrs)
str(data$Deep.Sleep.hrs)
str(data$Light.Sleep.hrs)
str(data$Light.Sleep.hrs)
str(data$Light.Sleep.hrs)
str(data$Light.Sleep.hrs)
sleep <- read.csv("Sleep.csv")
sleep$from.posix <- as.POSIXlt(sleep$from., format="%Y-%m-%d %H:%M")
sleep$from.date <- format(sleep$from.posix, "%Y-%m-%d")
sleep$from.time <- format(sleep$from.posix, "%H:%M")
sleep$to.posix <- as.POSIXlt(sleep$to., format="%Y-%m-%d %H:%M")
sleep$to.date <- format(sleep$to.posix, "%Y-%m-%d")
sleep$to.time <- format(sleep$to.posix, "%H:%M")
sleep <- subset(sleep, select=c(-from., -to., -from.posix, -to.posix, -from.date, -from.time, -to.time, -rem..s.))
str(Sleep)
str(sleep)
s2 <- transmute(sleep,
date = as.Date(to.date),
Deep.Sleep.hrs = deep..s./3600,
Light.Sleep.hrs = light..s./3600,
Total.Sleep.hrs = Deep.Sleep.hrs + Light.Sleep.hrs,
Awake.hrs = awake..s./3600,
Wake.Up.times = wake.up)
str(s2)
sleep$from.posix <- as.POSIXlt(sleep$from., format="%Y-%m-%d %H:%M")
sleep$from.date <- format(sleep$from.posix, "%Y-%m-%d")
sleep$from.time <- format(sleep$from.posix, "%H:%M")
sleep$to.posix <- as.POSIXlt(sleep$to., format="%Y-%m-%d %H:%M")
sleep$to.date <- format(sleep$to.posix, "%Y-%m-%d")
sleep$to.time <- format(sleep$to.posix, "%H:%M")
#sleep <- subset(sleep, select=c(-from., -to., -from.posix, -to.posix, -from.date, -from.time, -to.time, -rem..s.))
sleep <- read.csv("Sleep.csv")
sleep$from.posix <- as.POSIXlt(sleep$from., format="%Y-%m-%d %H:%M")
sleep$from.date <- format(sleep$from.posix, "%Y-%m-%d")
sleep$from.time <- format(sleep$from.posix, "%H:%M")
sleep$to.posix <- as.POSIXlt(sleep$to., format="%Y-%m-%d %H:%M")
sleep$to.date <- format(sleep$to.posix, "%Y-%m-%d")
sleep$to.time <- format(sleep$to.posix, "%H:%M")
#sleep <- subset(sleep, select=c(-from., -to., -from.posix, -to.posix, -from.date, -from.time, -to.time, -rem..s.))
s2 <- transmute(sleep,
date = as.Date(to.date),
Deep.Sleep.hrs = deep..s./3600,
Light.Sleep.hrs = light..s./3600,
Total.Sleep.hrs = Deep.Sleep.hrs + Light.Sleep.hrs,
Awake.hrs = awake..s./3600,
Wake.Up.times = wake.up)
str(s2)
s3 <- aggregate(. ~ date, FUN=sum, data=sleep)
s3 <- aggregate(. ~ date, FUN=sum, data=s2)
str(s3)
head(s3)
library(caret)
library(timeDate)
library(dplyr)
library(ggplot2)
# Load the original data
activity <- read.csv("Activity.csv")
sleep <- read.csv("Sleep.csv")
blood <- read.csv("Blood_pressure.csv")
weight <- read.csv("Weight.csv")
# Define the days off. They will be treated separately
daysoff <- as.factor(c(
as.Date("2015-04-03"),
as.Date("2015-04-06"),
seq(as.Date("2015-04-25"),as.Date("2015-05-02"), by="day"),
as.Date("2015-05-14"),
as.Date("2015-05-25"),
as.Date("2015-06-04"),
seq(as.Date("2015-08-01"),as.Date("2015-08-09"), by="day")
))
# Create a timeline
days <- seq(as.Date("2015-04-01"), as.Date("2015-08-31"), by="day")
data <- data.frame(date = as.factor(days), Day.Type=factor(0, levels= c("WORKDAY","WEEKEND","HOLIDAY")))
# Clean the data
# There are days that have multiple information. Aggregate them
###############################
# ACTIVITY
###############################
activity <- subset(activity, select=c(-Elevation..m.))
activity <- rename(activity,
date = Date,
Distance.km=Distance..km.)
data <- merge(data, activity, by="date", all=TRUE)
###############################
# SLEEP
###############################
sleep$from.posix <- as.POSIXlt(sleep$from., format="%Y-%m-%d %H:%M")
sleep$from.date <- format(sleep$from.posix, "%Y-%m-%d")
sleep$from.time <- format(sleep$from.posix, "%H:%M")
sleep$to.posix <- as.POSIXlt(sleep$to., format="%Y-%m-%d %H:%M")
sleep$to.date <- format(sleep$to.posix, "%Y-%m-%d")
sleep$to.time <- format(sleep$to.posix, "%H:%M")
sleep <- transmute(sleep,
date = as.Date(to.date),
Deep.Sleep.hrs = deep..s./3600,
Light.Sleep.hrs = light..s./3600,
Total.Sleep.hrs = Deep.Sleep.hrs + Light.Sleep.hrs,
Awake.hrs = awake..s./3600,
Wake.Up.times = wake.up)
sleep <- aggregate(. ~ date, FUN=sum, data=sleep)
data <- merge(data, sleep, by="date", all=TRUE)
###############################
# BLOOD
###############################
blood$posix <- as.POSIXlt(blood$Date, format="%Y-%m-%d %I:%M %p")
blood$date <- format(blood$posix, "%Y-%m-%d")
blood$time <- format(blood$posix, "%H:%M")
blood <- subset(blood, select=c(-Date, -Comments, -posix, -time))
blood <- aggregate(. ~ date, FUN=mean, data=blood)
blood <- rename(blood,
Heart.Rate.bpm = Heart.rate..bpm.)
blood$date <- as.factor(blood$date)
data <- merge(data, blood, by="date", all=TRUE)
###############################
# WEIGHT
###############################
weight$posix <- as.POSIXlt(weight$Date, format="%Y-%m-%d %I:%M %p")
weight$date <- format(weight$posix, "%Y-%m-%d")
weight$time <- format(weight$posix, "%H:%M")
weight <- subset(weight, select= c(-Date, -Comments, -posix, -time))
weight <- aggregate(. ~ date, FUN=mean, data=weight)
weight <- rename(weight,
Weight.Kg = Weight..kg.,
Fat.Mass.percent = Fat.mass....,
Lean.Mass.percent = Lean.mass....)
weight$date <- as.factor(weight$date)
data <- merge(data, weight, by="date", all=TRUE)
###############################
# HOLIDAYS
###############################
data[isWeekday(data$date), ]$Day.Type <- "WORKDAY"
data[isWeekend(data$date), ]$Day.Type <- "WEEKEND"
data[data$date %in% daysoff,]$Day.Type <- "HOLIDAY"
data$date <- as.Date(data$date)
head(data)
sleep <- read.csv("Sleep.csv")
sleep$from.posix <- as.POSIXlt(sleep$from., format="%Y-%m-%d %H:%M")
sleep$from.date <- format(sleep$from.posix, "%Y-%m-%d")
sleep$from.time <- format(sleep$from.posix, "%H:%M")
sleep$to.posix <- as.POSIXlt(sleep$to., format="%Y-%m-%d %H:%M")
sleep$to.date <- format(sleep$to.posix, "%Y-%m-%d")
sleep$to.time <- format(sleep$to.posix, "%H:%M")
sleep <- transmute(sleep,
date = as.Date(to.date),
Deep.Sleep.hrs = deep..s./3600,
Light.Sleep.hrs = light..s./3600,
Total.Sleep.hrs = Deep.Sleep.hrs + Light.Sleep.hrs,
Awake.hrs = awake..s./3600,
Wake.Up.times = wake.up)
sleep <- read.csv("Sleep.csv")
sleep$from.posix <- as.POSIXlt(sleep$from., format="%Y-%m-%d %H:%M")
sleep$from.date <- format(sleep$from.posix, "%Y-%m-%d")
sleep$from.time <- format(sleep$from.posix, "%H:%M")
sleep$to.posix <- as.POSIXlt(sleep$to., format="%Y-%m-%d %H:%M")
sleep$to.date <- format(sleep$to.posix, "%Y-%m-%d")
sleep$to.time <- format(sleep$to.posix, "%H:%M")
sleep <- transmute(sleep,
date = as.factor(to.date),
Deep.Sleep.hrs = deep..s./3600,
Light.Sleep.hrs = light..s./3600,
Total.Sleep.hrs = Deep.Sleep.hrs + Light.Sleep.hrs,
Awake.hrs = awake..s./3600,
Wake.Up.times = wake.up)
sleep <- aggregate(. ~ date, FUN=sum, data=sleep)
head(sleep)
data <- merge(data, sleep, by="date", all=TRUE)
head(data)
library(caret)
library(timeDate)
library(dplyr)
library(ggplot2)
# Load the original data
activity <- read.csv("Activity.csv")
sleep <- read.csv("Sleep.csv")
blood <- read.csv("Blood_pressure.csv")
weight <- read.csv("Weight.csv")
# Define the days off. They will be treated separately
daysoff <- as.factor(c(
as.Date("2015-04-03"),
as.Date("2015-04-06"),
seq(as.Date("2015-04-25"),as.Date("2015-05-02"), by="day"),
as.Date("2015-05-14"),
as.Date("2015-05-25"),
as.Date("2015-06-04"),
seq(as.Date("2015-08-01"),as.Date("2015-08-09"), by="day")
))
# Create a timeline
days <- seq(as.Date("2015-04-01"), as.Date("2015-08-31"), by="day")
data <- data.frame(date = as.factor(days), Day.Type=factor(0, levels= c("WORKDAY","WEEKEND","HOLIDAY")))
# Clean the data
# There are days that have multiple information. Aggregate them
###############################
# ACTIVITY
###############################
activity <- subset(activity, select=c(-Elevation..m.))
activity <- rename(activity,
date = Date,
Distance.km=Distance..km.)
data <- merge(data, activity, by="date", all=TRUE)
###############################
# SLEEP
###############################
sleep$from.posix <- as.POSIXlt(sleep$from., format="%Y-%m-%d %H:%M")
sleep$from.date <- format(sleep$from.posix, "%Y-%m-%d")
sleep$from.time <- format(sleep$from.posix, "%H:%M")
sleep$to.posix <- as.POSIXlt(sleep$to., format="%Y-%m-%d %H:%M")
sleep$to.date <- format(sleep$to.posix, "%Y-%m-%d")
sleep$to.time <- format(sleep$to.posix, "%H:%M")
sleep <- transmute(sleep,
date = as.factor(to.date),
Deep.Sleep.hrs = deep..s./3600,
Light.Sleep.hrs = light..s./3600,
Total.Sleep.hrs = Deep.Sleep.hrs + Light.Sleep.hrs,
Awake.hrs = awake..s./3600,
Wake.Up.times = wake.up)
sleep <- aggregate(. ~ date, FUN=sum, data=sleep)
data <- merge(data, sleep, by="date", all=TRUE)
###############################
# BLOOD
###############################
blood$posix <- as.POSIXlt(blood$Date, format="%Y-%m-%d %I:%M %p")
blood$date <- format(blood$posix, "%Y-%m-%d")
blood$time <- format(blood$posix, "%H:%M")
blood <- subset(blood, select=c(-Date, -Comments, -posix, -time))
blood <- aggregate(. ~ date, FUN=mean, data=blood)
blood <- rename(blood,
Heart.Rate.bpm = Heart.rate..bpm.)
blood$date <- as.factor(blood$date)
data <- merge(data, blood, by="date", all=TRUE)
###############################
# WEIGHT
###############################
weight$posix <- as.POSIXlt(weight$Date, format="%Y-%m-%d %I:%M %p")
weight$date <- format(weight$posix, "%Y-%m-%d")
weight$time <- format(weight$posix, "%H:%M")
weight <- subset(weight, select= c(-Date, -Comments, -posix, -time))
weight <- aggregate(. ~ date, FUN=mean, data=weight)
weight <- rename(weight,
Weight.Kg = Weight..kg.,
Fat.Mass.percent = Fat.mass....,
Lean.Mass.percent = Lean.mass....)
weight$date <- as.factor(weight$date)
data <- merge(data, weight, by="date", all=TRUE)
###############################
# HOLIDAYS
###############################
data[isWeekday(data$date), ]$Day.Type <- "WORKDAY"
data[isWeekend(data$date), ]$Day.Type <- "WEEKEND"
data[data$date %in% daysoff,]$Day.Type <- "HOLIDAY"
data$date <- as.Date(data$date)
head(data)
runApp(display.mode="showcase")
runApp(display.mode="showcase")
runApp(display.mode="showcase")
runApp(display.mode="showcase")
runApp(display.mode="showcase")
runApp(display.mode="showcase")
runApp(display.mode="showcase")
runApp(display.mode="showcase")
runApp(display.mode="showcase")
runApp(display.mode="showcase")
runApp(display.mode="showcase")
runApp(display.mode="showcase")
runApp(display.mode="showcase")
runApp(display.mode="showcase")
runApp(display.mode="showcase")
runApp(display.mode="showcase")
runApp(display.mode="showcase")
runApp(display.mode="showcase")
runApp(display.mode="showcase")
runApp(display.mode="showcase")
runApp(display.mode="showcase")
runApp(display.mode="showcase")
runApp(display.mode="showcase")
runApp(display.mode="showcase")
runApp(display.mode="showcase")
runApp(display.mode="showcase")
runApp(display.mode="showcase")
runApp(display.mode="showcase")
runApp(display.mode="showcase")
runApp(display.mode="showcase")
runApp(display.mode="showcase")
runApp(display.mode="showcase")
runApp(display.mode="showcase")
head(data)
runApp(display.mode="showcase")
head(data)
runApp(display.mode="showcase")
runApp(display.mode="showcase")
runApp(display.mode="showcase")
runApp(display.mode="showcase")
runApp(display.mode="showcase")
runApp(display.mode="showcase")
runApp(display.mode="showcase")
runApp(display.mode="showcase")
runApp(display.mode="showcase")
runApp(display.mode="showcase")
runApp(display.mode="showcase")
runApp(display.mode="showcase")
runApp(display.mode="showcase")
runApp(display.mode="showcase")
runApp(display.mode="showcase")
runApp(display.mode="showcase")
runApp(display.mode="showcase")
runApp(display.mode="showcase")
runApp(display.mode="showcase")
runApp(display.mode="showcase")
?writeRDS
$loadRDS
$readRDS
?readRDS
saveRDS(data, file = "data/tracking_data.RDS")
saveRDS(data, file = "./data/tracking_data.RDS")
ls
list()
list_files()
list.files()
list.dirs()
saveRDS(data, file = "./data/tracker_data.RDS")
runApp(display.mode="showcase")
runApp(display.mode="showcase")
runApp(display.mode="showcase")
runApp(display.mode="showcase")
runApp(display.mode="showcase")
runApp(display.mode="showcase")
runApp(display.mode="showcase")
runApp(display.mode="showcase")
runApp(display.mode="showcase")
runApp(display.mode="showcase")
runApp(display.mode="showcase")
runApp(display.mode="showcase")
runApp(display.mode="showcase")
runApp(display.mode="showcase")
runApp(display.mode="showcase")
runApp(display.mode="showcase")
runApp(display.mode="showcase")
runApp(display.mode="showcase")
runApp(display.mode="showcase")
runApp(display.mode="showcase")
library(caret)
library(timeDate)
library(dplyr)
library(ggplot2)
# Load the original data
activity <- read.csv("Activity.csv")
sleep <- read.csv("Sleep.csv")
blood <- read.csv("Blood_pressure.csv")
weight <- read.csv("Weight.csv")
# Define the days off. They will be treated separately
daysoff <- as.factor(c(
as.Date("2015-04-03"),
as.Date("2015-04-06"),
seq(as.Date("2015-04-25"),as.Date("2015-05-02"), by="day"),
as.Date("2015-05-14"),
as.Date("2015-05-25"),
as.Date("2015-06-04"),
seq(as.Date("2015-08-01"),as.Date("2015-08-09"), by="day")
))
# Create a timeline
days <- seq(as.Date("2015-04-01"), as.Date("2015-08-31"), by="day")
data <- data.frame(date = as.factor(days), Day.Type=factor(0, levels= c("WORKDAY","WEEKEND","HOLIDAY")))
# Clean the data
# There are days that have multiple information. Aggregate them
###############################
# ACTIVITY
###############################
activity <- subset(activity, select=c(-Elevation..m.))
activity <- rename(activity,
date = Date,
Distance.km=Distance..km.)
data <- merge(data, activity, by="date", all=TRUE)
###############################
# SLEEP
###############################
sleep$from.posix <- as.POSIXlt(sleep$from., format="%Y-%m-%d %H:%M")
sleep$from.date <- format(sleep$from.posix, "%Y-%m-%d")
sleep$from.time <- format(sleep$from.posix, "%H:%M")
sleep$to.posix <- as.POSIXlt(sleep$to., format="%Y-%m-%d %H:%M")
sleep$to.date <- format(sleep$to.posix, "%Y-%m-%d")
sleep$to.time <- format(sleep$to.posix, "%H:%M")
sleep <- transmute(sleep,
date = as.factor(to.date),
Deep.Sleep.hrs = deep..s./3600,
Light.Sleep.hrs = light..s./3600,
Total.Sleep.hrs = Deep.Sleep.hrs + Light.Sleep.hrs,
Awake.hrs = awake..s./3600,
Wake.Up.times = wake.up)
sleep <- aggregate(. ~ date, FUN=sum, data=sleep)
data <- merge(data, sleep, by="date", all=TRUE)
###############################
# BLOOD
###############################
blood$posix <- as.POSIXlt(blood$Date, format="%Y-%m-%d %I:%M %p")
blood$date <- format(blood$posix, "%Y-%m-%d")
blood$time <- format(blood$posix, "%H:%M")
blood <- subset(blood, select=c(-Date, -Comments, -posix, -time))
blood <- aggregate(. ~ date, FUN=mean, data=blood)
blood <- rename(blood,
Heart.Rate.bpm = Heart.rate..bpm.)
blood$date <- as.factor(blood$date)
data <- merge(data, blood, by="date", all=TRUE)
###############################
# WEIGHT
###############################
weight$posix <- as.POSIXlt(weight$Date, format="%Y-%m-%d %I:%M %p")
weight$date <- format(weight$posix, "%Y-%m-%d")
weight$time <- format(weight$posix, "%H:%M")
weight <- subset(weight, select= c(-Date, -Comments, -posix, -time, -Lean.mass....))
weight <- aggregate(. ~ date, FUN=mean, data=weight)
weight <- rename(weight,
Weight.Kg = Weight..kg.,
Fat.Mass.percent = Fat.mass....)
weight$date <- as.factor(weight$date)
data <- merge(data, weight, by="date", all=TRUE)
###############################
# HOLIDAYS
###############################
data[isWeekday(data$date), ]$Day.Type <- "WORKDAY"
data[isWeekend(data$date), ]$Day.Type <- "WEEKEND"
data[data$date %in% daysoff,]$Day.Type <- "HOLIDAY"
data$date <- as.Date(data$date)
saveRDS(data, file = "data/tracker_data.RDS")
runApp(display.mode="showcase")
runApp(display.mode="showcase")
dataset <- readRDS("data/tracker_data.rds")
runApp(display.mode="showcase")
runApp(display.mode="showcase")
runApp(display.mode="showcase")
runApp(display.mode="showcase")
runApp(display.mode="showcase")
runApp(display.mode="showcase")
runApp()
runApp()
setAccountInfo
shinyapps::setAccountInfo(name='f4data',
token='1F59A3D9DB5D32F1053262363332E40C',
secret='<SECRET>')
shinyapps::setAccountInfo(name='f4data',
token='1F59A3D9DB5D32F1053262363332E40C',
secret='XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX')
shinyapps::setAccountInfo(name='f4data',
token='1F59A3D9DB5D32F1053262363332E40C',
secret='ln3fvoOhwh05Mf3/QvDdVIUjGLwi219/QauwPBC0')
runApp()
setwd("~/Courses/Data Science/9.Data Products/Project/tracker")
library(rsconnect)
deployApp()
runApp()
deployApp()
deployApp()
shiny::runApp()
list.diles()
list.diles()
list.files()
list.files("data")
confusionMatrix(data)
dat
data
str(data)
